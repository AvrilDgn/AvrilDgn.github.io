!function(e){var n={};function t(r){if(n[r])return n[r].exports;var s=n[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(r,s,function(n){return e[n]}.bind(null,s));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var svgxuse_svgxuse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var svgxuse_svgxuse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svgxuse_svgxuse__WEBPACK_IMPORTED_MODULE_0__);\n\n\n(function (d, w) {\n  /*** Global ***/\n\n  /* Get elements */\n  function getElements(name) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : d;\n    var els = parent.getElementsByClassName(name);\n\n    if (!els) {\n      console.log(\"Error: elements with class \".concat(name, \" not found\"));\n      return false;\n    }\n\n    return els;\n  }\n  /* Remove class */\n\n\n  function removeClass(el, className) {\n    if (hasClass(el, className)) {\n      el.classList.remove(className);\n    }\n  }\n  /* Add class */\n\n\n  function addClass(el, className) {\n    el.classList.add(className);\n  }\n  /* Сheck availability сlass */\n\n\n  function hasClass(el, className) {\n    if (el.classList.contains(className)) {\n      return true;\n    }\n\n    return false;\n  }\n  /* check mobile operating system */\n\n\n  var devType = function () {\n    var userAgent = navigator.userAgent || navigator.vendor || w.opera; // Windows Phone must come first because its UA also contains \"Android\"\n\n    if (/android/i.test(userAgent)) {\n      return \"android\";\n    } // iOS detection from: http://stackoverflow.com/a/9039885/177710\n\n\n    if (/iPad|iPhone|iPod/.test(userAgent) && !w.MSStream) {\n      return \"ios\";\n    }\n\n    return \"desktop\";\n  }();\n  /*** deeplink ***/\n\n\n  (function () {\n    var deeplink = d.getElementsByClassName('deeplink');\n    var appFrame = d.createElement('iframe'); // addClass(appFrame, 'app-frame');\n\n    appFrame.style.display = 'none';\n    d.body.appendChild(appFrame);\n\n    for (var i = 0; i < deeplink.length; i++) {\n      deeplink[i].onclick = function (e) {\n        e.preventDefault();\n        var android_apk_url = this.getAttribute('data-android-apk');\n        var apk_url = this.getAttribute('data-apk');\n        var siteUrl = this.getAttribute('href');\n\n        switch (devType) {\n          case 'android':\n            appFrame.setAttribute('src', android_apk_url);\n\n            appFrame.onload = function () {\n              return;\n            };\n\n            setTimeout(function () {\n              w.open(siteUrl, '_blank');\n            }, 700);\n            break;\n\n          case 'desktop':\n            w.open(siteUrl, '_blank');\n            break;\n\n          default:\n            appFrame.setAttribute('src', apk_url);\n\n            appFrame.onload = function () {\n              return;\n            };\n\n            setTimeout(function () {\n              w.open(siteUrl, '_blank');\n            }, 700);\n            break;\n        }\n      };\n    }\n  })();\n  /*** Header scroll ***/\n\n\n  (function () {\n    var header = getElements('header')[0];\n    changeHeaderPosition();\n    w.addEventListener('scroll', changeHeaderPosition);\n\n    function changeHeaderPosition() {\n      if (pageYOffset >= 100) {\n        addClass(header, 'header_not-top');\n      } else {\n        removeClass(header, 'header_not-top');\n      }\n    }\n  })();\n  /*** Header show/hide navigation ***/\n\n\n  (function () {\n    var headerToggleBtn = getElements('header__toggle-btn')[0];\n    var header = getElements('header')[0];\n    var isShow = false;\n    var scrollPos;\n    headerToggleBtn.addEventListener('click', navigationShow);\n\n    function navigationShow(e) {\n      e.preventDefault();\n\n      if (!isShow) {\n        scrollPos = w.pageYOffset;\n        addClass(header, 'header_show');\n        setTimeout(function () {\n          d.body.style.height = \"100vh\";\n          d.body.style.overflowY = \"hidden\";\n          isShow = true;\n        }, 250);\n      } else {\n        d.body.removeAttribute('style');\n        header.removeAttribute('style');\n        removeClass(header, 'header_show');\n        w.scrollTo(0, scrollPos);\n        isShow = false;\n      }\n    }\n  })();\n})(document, window);\n\n//# sourceURL=webpack:///./app/src/js/main.js?")},function(module,exports){eval('/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    "use strict";\n    if (typeof window !== "undefined" && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener("resize", debouncedCheck, false);\n            window.addEventListener("orientationchange", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener("resize", debouncedCheck, false);\n                        window.removeEventListener("orientationchange", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener("DOMSubtreeModified", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener("DOMSubtreeModified", debouncedCheck, false);\n                    window.removeEventListener("resize", debouncedCheck, false);\n                    window.removeEventListener("orientationchange", debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement("a");\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, "") + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== "" && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = "http://www.w3.org/1999/xlink";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = ""; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, "xlink:href", "#" + spec.hash);\n                        if (spec.useEl.hasAttribute("href")) {\n                            spec.useEl.setAttribute("href", "#" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement("x");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName("svg")[0];\n                    if (svg) {\n                        svg.setAttribute("aria-hidden", "true");\n                        svg.style.position = "absolute";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = "hidden";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName("use");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute("href")\n                        || uses[i].getAttributeNS(xlinkNS, "href")\n                        || uses[i].getAttribute("xlink:href");\n                if (href && href.split) {\n                    url = href.split("#");\n                } else {\n                    url = ["", ""];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (uses[i].hasAttribute("href")) {\n                        uses[i].setAttributeNS(xlinkNS, "xlink:href", href);\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open("GET", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        setTimeout(attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        }), 0);\n                    }\n                }\n            }\n            uses = "";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        var winLoad;\n        winLoad = function () {\n            window.removeEventListener("load", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        };\n        if (document.readyState !== "complete") {\n            // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n            window.addEventListener("load", winLoad, false);\n        } else {\n            // No need to add a listener if the document is already loaded, initialize immediately.\n            winLoad();\n        }\n    }\n}());\n\n\n//# sourceURL=webpack:///./node_modules/svgxuse/svgxuse.js?')}]);